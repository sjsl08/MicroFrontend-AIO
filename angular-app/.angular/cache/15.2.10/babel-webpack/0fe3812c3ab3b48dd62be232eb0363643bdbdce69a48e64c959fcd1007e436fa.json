{"ast":null,"code":"import _asyncToGenerator from \"/home/gaian/MicrofrontEnd AIO/angular-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject } from '@angular/core';\nimport { getContainerElementAndSetTemplate } from 'single-spa-angular/internals';\nimport { BrowserPlatformLocation, DOCUMENT, PlatformLocation } from '@angular/common';\nfunction enableProdMode() {\n  try {\n    // The `enableProdMode` will throw an error if it's called multiple times,\n    // but it may be called multiple times when dependencies are shared.\n    i0.enableProdMode();\n  } catch {\n    // Nothing to do here.\n  }\n}\nclass SingleSpaPlatformLocation extends BrowserPlatformLocation {\n  constructor() {\n    super(...arguments);\n    // This is a simple marker that helps us to ignore PopStateEvents\n    // that was not dispatched by the browser.\n    this.skipNextPopState = false;\n    this.source = 'Window.addEventListener:popstate';\n  }\n  pushState(state, title, url) {\n    this.skipNextPopState = true;\n    super.pushState(state, title, url);\n  }\n  replaceState(state, title, url) {\n    this.skipNextPopState = true;\n    super.replaceState(state, title, url);\n  }\n  onPopState(fn) {\n    // `Zone.current` will reference the zone that serves as an execution context\n    // to some specific application, especially when `onPopState` is called.\n    const zone = Zone.current;\n    // Wrap any event listener into zone that is specific to some application.\n    // The main issue is `back/forward` buttons of browsers, because they invoke\n    // `history.back|forward` which dispatch `popstate` event. Since `single-spa`\n    // overrides `history.replaceState` Angular's zone cannot intercept this event.\n    // Only the root zone is able to intercept all events.\n    // See https://github.com/single-spa/single-spa-angular/issues/94 for more details\n    fn = zone.wrap(fn, this.source);\n    const onPopStateListener = event => {\n      // The `LocationChangeEvent` doesn't have the `singleSpa` property, since it's added\n      // by `single-spa` starting from `5.4` version. We need this check because we want\n      // to skip \"unnatural\" PopStateEvents, the one caused by `single-spa`.\n      const popStateEventWasDispatchedBySingleSpa = !!event.singleSpa;\n      if (this.skipNextPopState && popStateEventWasDispatchedBySingleSpa) {\n        this.skipNextPopState = false;\n      } else {\n        fn(event);\n      }\n    };\n    return super.onPopState(onPopStateListener);\n  }\n}\n/** @nocollapse */\nSingleSpaPlatformLocation.ɵfac = /* @__PURE__ */function () {\n  let ɵSingleSpaPlatformLocation_BaseFactory;\n  return function SingleSpaPlatformLocation_Factory(t) {\n    return (ɵSingleSpaPlatformLocation_BaseFactory || (ɵSingleSpaPlatformLocation_BaseFactory = i0.ɵɵgetInheritedFactory(SingleSpaPlatformLocation)))(t || SingleSpaPlatformLocation);\n  };\n}();\n/** @nocollapse */\nSingleSpaPlatformLocation.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: SingleSpaPlatformLocation,\n  factory: SingleSpaPlatformLocation.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SingleSpaPlatformLocation, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * The `PlatformLocation` class is an \"injectee\" of the `PathLocationStrategy`,\n * which creates `Subject` internally for listening on `popstate` events. We want\n * to provide this class in the most top injector that's used during bootstrapping.\n */\nfunction getSingleSpaExtraProviders() {\n  return [{\n    provide: SingleSpaPlatformLocation,\n    deps: [[new Inject(DOCUMENT)]]\n  }, {\n    provide: PlatformLocation,\n    useExisting: SingleSpaPlatformLocation\n  }];\n}\nconst defaultOptions = {\n  // Required options that will be set by the library consumer.\n  NgZone: null,\n  bootstrapFunction: null,\n  template: null,\n  // Optional options\n  Router: undefined,\n  domElementGetter: undefined,\n  updateFunction: () => Promise.resolve(),\n  bootstrappedNgModuleRefOrAppRef: null\n};\nconst NG_DEV_MODE = typeof ngDevMode === 'undefined' || ngDevMode;\nfunction singleSpaAngular(userOptions) {\n  if (NG_DEV_MODE && typeof userOptions !== 'object') {\n    throw Error('single-spa-angular requires a configuration object');\n  }\n  const options = {\n    ...defaultOptions,\n    ...userOptions\n  };\n  if (NG_DEV_MODE && typeof options.bootstrapFunction !== 'function') {\n    throw Error('single-spa-angular must be passed an options.bootstrapFunction');\n  }\n  if (NG_DEV_MODE && typeof options.template !== 'string') {\n    throw Error('single-spa-angular must be passed options.template string');\n  }\n  if (NG_DEV_MODE && !options.NgZone) {\n    throw Error(`single-spa-angular must be passed the NgZone option`);\n  }\n  if (NG_DEV_MODE && options.Router && !options.NavigationStart) {\n    // We call `console.warn` except of throwing `new Error()` since this will not\n    // be a breaking change.\n    console.warn(`single-spa-angular must be passed the NavigationStart option`);\n  }\n  return {\n    bootstrap: bootstrap.bind(null, options),\n    mount: mount.bind(null, options),\n    unmount: unmount.bind(null, options),\n    update: options.updateFunction\n  };\n}\nfunction bootstrap(_x, _x2) {\n  return _bootstrap.apply(this, arguments);\n}\nfunction _bootstrap() {\n  _bootstrap = _asyncToGenerator(function* (options, props) {\n    // Angular provides an opportunity to develop `zone-less` application, where developers\n    // have to trigger change detection manually.\n    // See https://angular.io/guide/zone#noopzone\n    if (options.NgZone === 'noop') {\n      return;\n    }\n    // In order for multiple Angular apps to work concurrently on a page, they each need a unique identifier.\n    options.zoneIdentifier = `single-spa-angular:${props.name || props.appName}`;\n    // This is a hack, since NgZone doesn't allow you to configure the property that identifies your zone.\n    // See https://github.com/PlaceMe-SAS/single-spa-angular-cli/issues/33,\n    // https://github.com/single-spa/single-spa-angular/issues/47,\n    // https://github.com/angular/angular/blob/a14dc2d7a4821a19f20a9547053a5734798f541e/packages/core/src/zone/ng_zone.ts#L144,\n    // and https://github.com/angular/angular/blob/a14dc2d7a4821a19f20a9547053a5734798f541e/packages/core/src/zone/ng_zone.ts#L257\n    options.NgZone.isInAngularZone = () => {\n      // @ts-ignore\n      return window.Zone.current._properties[options.zoneIdentifier] === true;\n    };\n    options.routingEventListener = () => {\n      options.bootstrappedNgZone.run(() => {\n        // See https://github.com/single-spa/single-spa-angular/issues/86\n        // Zone is unaware of the single-spa navigation change and so Angular change detection doesn't work\n        // unless we tell Zone that something happened\n      });\n    };\n  });\n  return _bootstrap.apply(this, arguments);\n}\nfunction mount(_x3, _x4) {\n  return _mount.apply(this, arguments);\n}\nfunction _mount() {\n  _mount = _asyncToGenerator(function* (options, props) {\n    getContainerElementAndSetTemplate(options, props);\n    const bootstrapPromise = options.bootstrapFunction(props);\n    if (NG_DEV_MODE && !(bootstrapPromise instanceof Promise)) {\n      throw Error(`single-spa-angular: the options.bootstrapFunction must return a promise, but instead returned a '${typeof bootstrapPromise}' that is not a Promise`);\n    }\n    const ngModuleRefOrAppRef = yield bootstrapPromise;\n    if (NG_DEV_MODE) {\n      if (!ngModuleRefOrAppRef || typeof ngModuleRefOrAppRef.destroy !== 'function') {\n        throw Error(`single-spa-angular: the options.bootstrapFunction returned a promise that did not resolve with a valid Angular module or ApplicationRef. Did you call platformBrowserDynamic().bootstrapModule() correctly?`);\n      }\n    }\n    const singleSpaPlatformLocation = ngModuleRefOrAppRef.injector.get(SingleSpaPlatformLocation, null);\n    const ngZoneEnabled = options.NgZone !== 'noop';\n    // The user has to provide `BrowserPlatformLocation` only if his application uses routing.\n    // So if he provided `Router` but didn't provide `BrowserPlatformLocation` then we have to inform him.\n    // Also `getSingleSpaExtraProviders()` function should be called only if the user doesn't use\n    // `zone-less` change detection, if `NgZone` is `noop` then we can skip it.\n    if (NG_DEV_MODE && ngZoneEnabled && options.Router && singleSpaPlatformLocation === null) {\n      throw new Error(`\n      single-spa-angular: could not retrieve extra providers from the platform injector. Did you call platformBrowserDynamic(getSingleSpaExtraProviders()).bootstrapModule()?\n    `);\n    }\n    const bootstrappedOptions = options;\n    if (ngZoneEnabled) {\n      const ngZone = ngModuleRefOrAppRef.injector.get(options.NgZone);\n      const zoneIdentifier = bootstrappedOptions.zoneIdentifier;\n      // `NgZone` can be enabled but routing may not be used thus `getSingleSpaExtraProviders()`\n      // function was not called.\n      if (singleSpaPlatformLocation !== null) {\n        skipLocationChangeOnNonImperativeRoutingTriggers(ngModuleRefOrAppRef, options);\n      }\n      bootstrappedOptions.bootstrappedNgZone = ngZone;\n      bootstrappedOptions.bootstrappedNgZone['_inner']._properties[zoneIdentifier] = true;\n      window.addEventListener('single-spa:routing-event', bootstrappedOptions.routingEventListener);\n    }\n    bootstrappedOptions.bootstrappedNgModuleRefOrAppRef = ngModuleRefOrAppRef;\n    return ngModuleRefOrAppRef;\n  });\n  return _mount.apply(this, arguments);\n}\nfunction unmount(options) {\n  return Promise.resolve().then(() => {\n    if (options.routingEventListener) {\n      window.removeEventListener('single-spa:routing-event', options.routingEventListener);\n    }\n    options.bootstrappedNgModuleRefOrAppRef.destroy();\n    options.bootstrappedNgModuleRefOrAppRef = null;\n  });\n}\nfunction skipLocationChangeOnNonImperativeRoutingTriggers(ngModuleRefOrAppRef, options) {\n  if (!options.NavigationStart) {\n    // As discussed we don't do anything right now if the developer doesn't provide\n    // `options.NavigationStart` since this might be a breaking change.\n    return;\n  }\n  const router = ngModuleRefOrAppRef.injector.get(options.Router);\n  const subscription = router.events.subscribe(event => {\n    if (event instanceof options.NavigationStart) {\n      const currentNavigation = router.getCurrentNavigation();\n      // This listener will be set up for each Angular application\n      // that has routing capabilities.\n      // We set `skipLocationChange` for each non-imperative navigation,\n      // Angular router checks under the hood if it has to change\n      // the browser URL or not.\n      // If `skipLocationChange` is truthy then Angular router will not call\n      // `setBrowserUrl()` which calls `history.replaceState()` and dispatches `popstate` event.\n      if (currentNavigation.trigger !== 'imperative') {\n        currentNavigation.extras.skipLocationChange = true;\n        currentNavigation.extras.replaceUrl = false;\n      }\n    }\n  });\n  // The `ApplicationRef` also has `onDestroy` method, but it's marked as internal.\n  ngModuleRefOrAppRef['onDestroy'](() => {\n    subscription.unsubscribe();\n  });\n}\n\n/**\n * The public api for consumers of single-spa-angular\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { enableProdMode, getSingleSpaExtraProviders, singleSpaAngular };","map":{"version":3,"names":["i0","Injectable","Inject","getContainerElementAndSetTemplate","BrowserPlatformLocation","DOCUMENT","PlatformLocation","enableProdMode","SingleSpaPlatformLocation","constructor","arguments","skipNextPopState","source","pushState","state","title","url","replaceState","onPopState","fn","zone","Zone","current","wrap","onPopStateListener","event","popStateEventWasDispatchedBySingleSpa","singleSpa","ɵfac","ɵprov","type","getSingleSpaExtraProviders","provide","deps","useExisting","defaultOptions","NgZone","bootstrapFunction","template","Router","undefined","domElementGetter","updateFunction","Promise","resolve","bootstrappedNgModuleRefOrAppRef","NG_DEV_MODE","ngDevMode","singleSpaAngular","userOptions","Error","options","NavigationStart","console","warn","bootstrap","bind","mount","unmount","update","props","zoneIdentifier","name","appName","isInAngularZone","window","_properties","routingEventListener","bootstrappedNgZone","run","bootstrapPromise","ngModuleRefOrAppRef","destroy","singleSpaPlatformLocation","injector","get","ngZoneEnabled","bootstrappedOptions","ngZone","skipLocationChangeOnNonImperativeRoutingTriggers","addEventListener","then","removeEventListener","router","subscription","events","subscribe","currentNavigation","getCurrentNavigation","trigger","extras","skipLocationChange","replaceUrl","unsubscribe"],"sources":["/home/gaian/MicrofrontEnd AIO/angular-app/node_modules/single-spa-angular/fesm2020/single-spa-angular.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Inject } from '@angular/core';\nimport { getContainerElementAndSetTemplate } from 'single-spa-angular/internals';\nimport { BrowserPlatformLocation, DOCUMENT, PlatformLocation } from '@angular/common';\n\nfunction enableProdMode() {\n    try {\n        // The `enableProdMode` will throw an error if it's called multiple times,\n        // but it may be called multiple times when dependencies are shared.\n        i0.enableProdMode();\n    }\n    catch {\n        // Nothing to do here.\n    }\n}\n\nclass SingleSpaPlatformLocation extends BrowserPlatformLocation {\n    constructor() {\n        super(...arguments);\n        // This is a simple marker that helps us to ignore PopStateEvents\n        // that was not dispatched by the browser.\n        this.skipNextPopState = false;\n        this.source = 'Window.addEventListener:popstate';\n    }\n    pushState(state, title, url) {\n        this.skipNextPopState = true;\n        super.pushState(state, title, url);\n    }\n    replaceState(state, title, url) {\n        this.skipNextPopState = true;\n        super.replaceState(state, title, url);\n    }\n    onPopState(fn) {\n        // `Zone.current` will reference the zone that serves as an execution context\n        // to some specific application, especially when `onPopState` is called.\n        const zone = Zone.current;\n        // Wrap any event listener into zone that is specific to some application.\n        // The main issue is `back/forward` buttons of browsers, because they invoke\n        // `history.back|forward` which dispatch `popstate` event. Since `single-spa`\n        // overrides `history.replaceState` Angular's zone cannot intercept this event.\n        // Only the root zone is able to intercept all events.\n        // See https://github.com/single-spa/single-spa-angular/issues/94 for more details\n        fn = zone.wrap(fn, this.source);\n        const onPopStateListener = (event) => {\n            // The `LocationChangeEvent` doesn't have the `singleSpa` property, since it's added\n            // by `single-spa` starting from `5.4` version. We need this check because we want\n            // to skip \"unnatural\" PopStateEvents, the one caused by `single-spa`.\n            const popStateEventWasDispatchedBySingleSpa = !!event\n                .singleSpa;\n            if (this.skipNextPopState && popStateEventWasDispatchedBySingleSpa) {\n                this.skipNextPopState = false;\n            }\n            else {\n                fn(event);\n            }\n        };\n        return super.onPopState(onPopStateListener);\n    }\n}\n/** @nocollapse */ SingleSpaPlatformLocation.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.2\", ngImport: i0, type: SingleSpaPlatformLocation, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ SingleSpaPlatformLocation.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.2\", ngImport: i0, type: SingleSpaPlatformLocation });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.2\", ngImport: i0, type: SingleSpaPlatformLocation, decorators: [{\n            type: Injectable\n        }] });\n/**\n * The `PlatformLocation` class is an \"injectee\" of the `PathLocationStrategy`,\n * which creates `Subject` internally for listening on `popstate` events. We want\n * to provide this class in the most top injector that's used during bootstrapping.\n */\nfunction getSingleSpaExtraProviders() {\n    return [\n        {\n            provide: SingleSpaPlatformLocation,\n            deps: [[new Inject(DOCUMENT)]],\n        },\n        {\n            provide: PlatformLocation,\n            useExisting: SingleSpaPlatformLocation,\n        },\n    ];\n}\n\nconst defaultOptions = {\n    // Required options that will be set by the library consumer.\n    NgZone: null,\n    bootstrapFunction: null,\n    template: null,\n    // Optional options\n    Router: undefined,\n    domElementGetter: undefined,\n    updateFunction: () => Promise.resolve(),\n    bootstrappedNgModuleRefOrAppRef: null,\n};\nconst NG_DEV_MODE = typeof ngDevMode === 'undefined' || ngDevMode;\nfunction singleSpaAngular(userOptions) {\n    if (NG_DEV_MODE && typeof userOptions !== 'object') {\n        throw Error('single-spa-angular requires a configuration object');\n    }\n    const options = {\n        ...defaultOptions,\n        ...userOptions,\n    };\n    if (NG_DEV_MODE && typeof options.bootstrapFunction !== 'function') {\n        throw Error('single-spa-angular must be passed an options.bootstrapFunction');\n    }\n    if (NG_DEV_MODE && typeof options.template !== 'string') {\n        throw Error('single-spa-angular must be passed options.template string');\n    }\n    if (NG_DEV_MODE && !options.NgZone) {\n        throw Error(`single-spa-angular must be passed the NgZone option`);\n    }\n    if (NG_DEV_MODE && options.Router && !options.NavigationStart) {\n        // We call `console.warn` except of throwing `new Error()` since this will not\n        // be a breaking change.\n        console.warn(`single-spa-angular must be passed the NavigationStart option`);\n    }\n    return {\n        bootstrap: bootstrap.bind(null, options),\n        mount: mount.bind(null, options),\n        unmount: unmount.bind(null, options),\n        update: options.updateFunction,\n    };\n}\nasync function bootstrap(options, props) {\n    // Angular provides an opportunity to develop `zone-less` application, where developers\n    // have to trigger change detection manually.\n    // See https://angular.io/guide/zone#noopzone\n    if (options.NgZone === 'noop') {\n        return;\n    }\n    // In order for multiple Angular apps to work concurrently on a page, they each need a unique identifier.\n    options.zoneIdentifier = `single-spa-angular:${props.name || props.appName}`;\n    // This is a hack, since NgZone doesn't allow you to configure the property that identifies your zone.\n    // See https://github.com/PlaceMe-SAS/single-spa-angular-cli/issues/33,\n    // https://github.com/single-spa/single-spa-angular/issues/47,\n    // https://github.com/angular/angular/blob/a14dc2d7a4821a19f20a9547053a5734798f541e/packages/core/src/zone/ng_zone.ts#L144,\n    // and https://github.com/angular/angular/blob/a14dc2d7a4821a19f20a9547053a5734798f541e/packages/core/src/zone/ng_zone.ts#L257\n    options.NgZone.isInAngularZone = () => {\n        // @ts-ignore\n        return window.Zone.current._properties[options.zoneIdentifier] === true;\n    };\n    options.routingEventListener = () => {\n        options.bootstrappedNgZone.run(() => {\n            // See https://github.com/single-spa/single-spa-angular/issues/86\n            // Zone is unaware of the single-spa navigation change and so Angular change detection doesn't work\n            // unless we tell Zone that something happened\n        });\n    };\n}\nasync function mount(options, props) {\n    getContainerElementAndSetTemplate(options, props);\n    const bootstrapPromise = options.bootstrapFunction(props);\n    if (NG_DEV_MODE && !(bootstrapPromise instanceof Promise)) {\n        throw Error(`single-spa-angular: the options.bootstrapFunction must return a promise, but instead returned a '${typeof bootstrapPromise}' that is not a Promise`);\n    }\n    const ngModuleRefOrAppRef = await bootstrapPromise;\n    if (NG_DEV_MODE) {\n        if (!ngModuleRefOrAppRef || typeof ngModuleRefOrAppRef.destroy !== 'function') {\n            throw Error(`single-spa-angular: the options.bootstrapFunction returned a promise that did not resolve with a valid Angular module or ApplicationRef. Did you call platformBrowserDynamic().bootstrapModule() correctly?`);\n        }\n    }\n    const singleSpaPlatformLocation = ngModuleRefOrAppRef.injector.get(SingleSpaPlatformLocation, null);\n    const ngZoneEnabled = options.NgZone !== 'noop';\n    // The user has to provide `BrowserPlatformLocation` only if his application uses routing.\n    // So if he provided `Router` but didn't provide `BrowserPlatformLocation` then we have to inform him.\n    // Also `getSingleSpaExtraProviders()` function should be called only if the user doesn't use\n    // `zone-less` change detection, if `NgZone` is `noop` then we can skip it.\n    if (NG_DEV_MODE && ngZoneEnabled && options.Router && singleSpaPlatformLocation === null) {\n        throw new Error(`\n      single-spa-angular: could not retrieve extra providers from the platform injector. Did you call platformBrowserDynamic(getSingleSpaExtraProviders()).bootstrapModule()?\n    `);\n    }\n    const bootstrappedOptions = options;\n    if (ngZoneEnabled) {\n        const ngZone = ngModuleRefOrAppRef.injector.get(options.NgZone);\n        const zoneIdentifier = bootstrappedOptions.zoneIdentifier;\n        // `NgZone` can be enabled but routing may not be used thus `getSingleSpaExtraProviders()`\n        // function was not called.\n        if (singleSpaPlatformLocation !== null) {\n            skipLocationChangeOnNonImperativeRoutingTriggers(ngModuleRefOrAppRef, options);\n        }\n        bootstrappedOptions.bootstrappedNgZone = ngZone;\n        bootstrappedOptions.bootstrappedNgZone['_inner']._properties[zoneIdentifier] = true;\n        window.addEventListener('single-spa:routing-event', bootstrappedOptions.routingEventListener);\n    }\n    bootstrappedOptions.bootstrappedNgModuleRefOrAppRef = ngModuleRefOrAppRef;\n    return ngModuleRefOrAppRef;\n}\nfunction unmount(options) {\n    return Promise.resolve().then(() => {\n        if (options.routingEventListener) {\n            window.removeEventListener('single-spa:routing-event', options.routingEventListener);\n        }\n        options.bootstrappedNgModuleRefOrAppRef.destroy();\n        options.bootstrappedNgModuleRefOrAppRef = null;\n    });\n}\nfunction skipLocationChangeOnNonImperativeRoutingTriggers(ngModuleRefOrAppRef, options) {\n    if (!options.NavigationStart) {\n        // As discussed we don't do anything right now if the developer doesn't provide\n        // `options.NavigationStart` since this might be a breaking change.\n        return;\n    }\n    const router = ngModuleRefOrAppRef.injector.get(options.Router);\n    const subscription = router.events.subscribe((event) => {\n        if (event instanceof options.NavigationStart) {\n            const currentNavigation = router.getCurrentNavigation();\n            // This listener will be set up for each Angular application\n            // that has routing capabilities.\n            // We set `skipLocationChange` for each non-imperative navigation,\n            // Angular router checks under the hood if it has to change\n            // the browser URL or not.\n            // If `skipLocationChange` is truthy then Angular router will not call\n            // `setBrowserUrl()` which calls `history.replaceState()` and dispatches `popstate` event.\n            if (currentNavigation.trigger !== 'imperative') {\n                currentNavigation.extras.skipLocationChange = true;\n                currentNavigation.extras.replaceUrl = false;\n            }\n        }\n    });\n    // The `ApplicationRef` also has `onDestroy` method, but it's marked as internal.\n    ngModuleRefOrAppRef['onDestroy'](() => {\n        subscription.unsubscribe();\n    });\n}\n\n/**\n * The public api for consumers of single-spa-angular\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { enableProdMode, getSingleSpaExtraProviders, singleSpaAngular };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}