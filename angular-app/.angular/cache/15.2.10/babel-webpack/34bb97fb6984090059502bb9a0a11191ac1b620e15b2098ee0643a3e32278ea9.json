{"ast":null,"code":"function getContainerElementAndSetTemplate(options, props) {\n  const domElementGetter = chooseDomElementGetter(options, props);\n  if ((typeof ngDevMode === 'undefined' || ngDevMode) && !domElementGetter) {\n    throw Error(`Cannot mount angular application '${props.name || props.appName}' without a domElementGetter provided either as an opt or a prop`);\n  }\n  const containerElement = getContainerElement(domElementGetter, props);\n  containerElement.innerHTML = options.template;\n  return containerElement;\n}\nfunction getContainerElement(domElementGetter, props) {\n  const element = domElementGetter(props);\n  if ((typeof ngDevMode === 'undefined' || ngDevMode) && !element) {\n    throw Error('domElementGetter did not return a valid dom element');\n  }\n  return element;\n}\nfunction chooseDomElementGetter(opts, props) {\n  props = props?.customProps ?? props;\n  if (props.domElement) {\n    return () => props.domElement;\n  } else if (props.domElementGetter) {\n    return props.domElementGetter;\n  } else if (opts.domElementGetter) {\n    return opts.domElementGetter;\n  } else {\n    return defaultDomElementGetter(props.name);\n  }\n}\nfunction defaultDomElementGetter(name) {\n  return function getDefaultDomElement() {\n    const id = `single-spa-application:${name}`;\n    let domElement = document.getElementById(id);\n    if (!domElement) {\n      domElement = document.createElement('div');\n      domElement.id = id;\n      document.body.appendChild(domElement);\n    }\n    return domElement;\n  };\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { getContainerElementAndSetTemplate };\n//# sourceMappingURL=single-spa-angular-internals.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}