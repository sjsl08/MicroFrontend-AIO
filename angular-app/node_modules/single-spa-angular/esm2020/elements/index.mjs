import { getContainerElementAndSetTemplate, } from 'single-spa-angular/internals';
const defaultOptions = {
    element: null,
    template: null,
    ngModuleRefOrAppRef: null,
    bootstrapFunction: null,
    domElementGetter: undefined,
};
async function bootstrap(options, props) {
    if (options.ngModuleRefOrAppRef !== null) {
        return;
    }
    // We call `bootstrapFunction()` inside the bootstrap lifecycle hook
    // because Angular modules that expose custom elements should be
    // bootstrapped only once.
    options.ngModuleRefOrAppRef = await options.bootstrapFunction(props);
}
async function mount(options, props) {
    const containerElement = getContainerElementAndSetTemplate(options, props);
    // `options.template` which can be `<app-element />` is not a valid selector
    // for `document.querySelector`, thus we retrieve this custom element
    // via this property.
    options.element = containerElement.firstElementChild;
}
function unmount(options) {
    return Promise.resolve().then(() => {
        // Removing custom element from DOM is enough since it will trigger
        // `disconnectedCallback()` and Angular will dispose all resources.
        options.element.parentElement.removeChild(options.element);
        options.element = null;
    });
}
export function singleSpaAngularElements(userOptions) {
    const options = {
        ...defaultOptions,
        ...userOptions,
    };
    return {
        bootstrap: bootstrap.bind(null, options),
        mount: mount.bind(null, options),
        unmount: unmount.bind(null, options),
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWJzL3NpbmdsZS1zcGEtYW5ndWxhci9lbGVtZW50cy9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUVMLGlDQUFpQyxHQUNsQyxNQUFNLDhCQUE4QixDQUFDO0FBSXRDLE1BQU0sY0FBYyxHQUFnRDtJQUNsRSxPQUFPLEVBQUUsSUFBSTtJQUNiLFFBQVEsRUFBRSxJQUFLO0lBQ2YsbUJBQW1CLEVBQUUsSUFBSTtJQUN6QixpQkFBaUIsRUFBRSxJQUFLO0lBQ3hCLGdCQUFnQixFQUFFLFNBQVM7Q0FDNUIsQ0FBQztBQUVGLEtBQUssVUFBVSxTQUFTLENBQUMsT0FBb0QsRUFBRSxLQUFVO0lBQ3ZGLElBQUksT0FBTyxDQUFDLG1CQUFtQixLQUFLLElBQUksRUFBRTtRQUN4QyxPQUFPO0tBQ1I7SUFFRCxvRUFBb0U7SUFDcEUsZ0VBQWdFO0lBQ2hFLDBCQUEwQjtJQUMxQixPQUFPLENBQUMsbUJBQW1CLEdBQUcsTUFBTSxPQUFPLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdkUsQ0FBQztBQUVELEtBQUssVUFBVSxLQUFLLENBQUMsT0FBb0QsRUFBRSxLQUFVO0lBQ25GLE1BQU0sZ0JBQWdCLEdBQUcsaUNBQWlDLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzNFLDRFQUE0RTtJQUM1RSxxRUFBcUU7SUFDckUscUJBQXFCO0lBQ3JCLE9BQU8sQ0FBQyxPQUFPLEdBQUcsZ0JBQWdCLENBQUMsaUJBQThCLENBQUM7QUFDcEUsQ0FBQztBQUVELFNBQVMsT0FBTyxDQUFDLE9BQW9EO0lBQ25FLE9BQU8sT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7UUFDakMsbUVBQW1FO1FBQ25FLG1FQUFtRTtRQUNuRSxPQUFPLENBQUMsT0FBUSxDQUFDLGFBQWMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLE9BQVEsQ0FBQyxDQUFDO1FBQzlELE9BQU8sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQ3pCLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELE1BQU0sVUFBVSx3QkFBd0IsQ0FBQyxXQUF3QztJQUMvRSxNQUFNLE9BQU8sR0FBZ0Q7UUFDM0QsR0FBRyxjQUFjO1FBQ2pCLEdBQUcsV0FBVztLQUNmLENBQUM7SUFFRixPQUFPO1FBQ0wsU0FBUyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQztRQUN4QyxLQUFLLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDO1FBQ2hDLE9BQU8sRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUM7S0FDckMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMaWZlQ3ljbGVzIH0gZnJvbSAnc2luZ2xlLXNwYSc7XG5pbXBvcnQgeyBOZ0VsZW1lbnQgfSBmcm9tICdAYW5ndWxhci9lbGVtZW50cyc7XG5pbXBvcnQge1xuICBCYXNlU2luZ2xlU3BhQW5ndWxhck9wdGlvbnMsXG4gIGdldENvbnRhaW5lckVsZW1lbnRBbmRTZXRUZW1wbGF0ZSxcbn0gZnJvbSAnc2luZ2xlLXNwYS1hbmd1bGFyL2ludGVybmFscyc7XG5cbmltcG9ydCB7IEJvb3RzdHJhcHBlZFNpbmdsZVNwYUFuZ3VsYXJFbGVtZW50c09wdGlvbnMgfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgZGVmYXVsdE9wdGlvbnM6IEJvb3RzdHJhcHBlZFNpbmdsZVNwYUFuZ3VsYXJFbGVtZW50c09wdGlvbnMgPSB7XG4gIGVsZW1lbnQ6IG51bGwsXG4gIHRlbXBsYXRlOiBudWxsISxcbiAgbmdNb2R1bGVSZWZPckFwcFJlZjogbnVsbCxcbiAgYm9vdHN0cmFwRnVuY3Rpb246IG51bGwhLFxuICBkb21FbGVtZW50R2V0dGVyOiB1bmRlZmluZWQsXG59O1xuXG5hc3luYyBmdW5jdGlvbiBib290c3RyYXAob3B0aW9uczogQm9vdHN0cmFwcGVkU2luZ2xlU3BhQW5ndWxhckVsZW1lbnRzT3B0aW9ucywgcHJvcHM6IGFueSkge1xuICBpZiAob3B0aW9ucy5uZ01vZHVsZVJlZk9yQXBwUmVmICE9PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gV2UgY2FsbCBgYm9vdHN0cmFwRnVuY3Rpb24oKWAgaW5zaWRlIHRoZSBib290c3RyYXAgbGlmZWN5Y2xlIGhvb2tcbiAgLy8gYmVjYXVzZSBBbmd1bGFyIG1vZHVsZXMgdGhhdCBleHBvc2UgY3VzdG9tIGVsZW1lbnRzIHNob3VsZCBiZVxuICAvLyBib290c3RyYXBwZWQgb25seSBvbmNlLlxuICBvcHRpb25zLm5nTW9kdWxlUmVmT3JBcHBSZWYgPSBhd2FpdCBvcHRpb25zLmJvb3RzdHJhcEZ1bmN0aW9uKHByb3BzKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gbW91bnQob3B0aW9uczogQm9vdHN0cmFwcGVkU2luZ2xlU3BhQW5ndWxhckVsZW1lbnRzT3B0aW9ucywgcHJvcHM6IGFueSkge1xuICBjb25zdCBjb250YWluZXJFbGVtZW50ID0gZ2V0Q29udGFpbmVyRWxlbWVudEFuZFNldFRlbXBsYXRlKG9wdGlvbnMsIHByb3BzKTtcbiAgLy8gYG9wdGlvbnMudGVtcGxhdGVgIHdoaWNoIGNhbiBiZSBgPGFwcC1lbGVtZW50IC8+YCBpcyBub3QgYSB2YWxpZCBzZWxlY3RvclxuICAvLyBmb3IgYGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JgLCB0aHVzIHdlIHJldHJpZXZlIHRoaXMgY3VzdG9tIGVsZW1lbnRcbiAgLy8gdmlhIHRoaXMgcHJvcGVydHkuXG4gIG9wdGlvbnMuZWxlbWVudCA9IGNvbnRhaW5lckVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQgYXMgTmdFbGVtZW50O1xufVxuXG5mdW5jdGlvbiB1bm1vdW50KG9wdGlvbnM6IEJvb3RzdHJhcHBlZFNpbmdsZVNwYUFuZ3VsYXJFbGVtZW50c09wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgIC8vIFJlbW92aW5nIGN1c3RvbSBlbGVtZW50IGZyb20gRE9NIGlzIGVub3VnaCBzaW5jZSBpdCB3aWxsIHRyaWdnZXJcbiAgICAvLyBgZGlzY29ubmVjdGVkQ2FsbGJhY2soKWAgYW5kIEFuZ3VsYXIgd2lsbCBkaXNwb3NlIGFsbCByZXNvdXJjZXMuXG4gICAgb3B0aW9ucy5lbGVtZW50IS5wYXJlbnRFbGVtZW50IS5yZW1vdmVDaGlsZChvcHRpb25zLmVsZW1lbnQhKTtcbiAgICBvcHRpb25zLmVsZW1lbnQgPSBudWxsO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNpbmdsZVNwYUFuZ3VsYXJFbGVtZW50cyh1c2VyT3B0aW9uczogQmFzZVNpbmdsZVNwYUFuZ3VsYXJPcHRpb25zKTogTGlmZUN5Y2xlcyB7XG4gIGNvbnN0IG9wdGlvbnM6IEJvb3RzdHJhcHBlZFNpbmdsZVNwYUFuZ3VsYXJFbGVtZW50c09wdGlvbnMgPSB7XG4gICAgLi4uZGVmYXVsdE9wdGlvbnMsXG4gICAgLi4udXNlck9wdGlvbnMsXG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBib290c3RyYXA6IGJvb3RzdHJhcC5iaW5kKG51bGwsIG9wdGlvbnMpLFxuICAgIG1vdW50OiBtb3VudC5iaW5kKG51bGwsIG9wdGlvbnMpLFxuICAgIHVubW91bnQ6IHVubW91bnQuYmluZChudWxsLCBvcHRpb25zKSxcbiAgfTtcbn1cbiJdfQ==