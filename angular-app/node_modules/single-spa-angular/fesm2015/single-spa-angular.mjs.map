{"version":3,"file":"single-spa-angular.mjs","sources":["../../libs/single-spa-angular/src/prod-mode.ts","../../libs/single-spa-angular/src/extra-providers.ts","../../libs/single-spa-angular/src/single-spa-angular.ts","../../libs/single-spa-angular/index.ts","../../libs/single-spa-angular/single-spa-angular.ts"],"sourcesContent":["import * as core from '@angular/core';\n\nexport function enableProdMode(): void {\n  try {\n    // The `enableProdMode` will throw an error if it's called multiple times,\n    // but it may be called multiple times when dependencies are shared.\n    core.enableProdMode();\n  } catch {\n    // Nothing to do here.\n  }\n}\n","import { Injectable, StaticProvider, Inject } from '@angular/core';\nimport {\n  BrowserPlatformLocation,\n  PlatformLocation,\n  LocationChangeEvent,\n  LocationChangeListener,\n  DOCUMENT,\n} from '@angular/common';\n\ndeclare const Zone: any;\n\n@Injectable()\nexport class SingleSpaPlatformLocation extends BrowserPlatformLocation {\n  // This is a simple marker that helps us to ignore PopStateEvents\n  // that was not dispatched by the browser.\n  private skipNextPopState = false;\n\n  private readonly source = 'Window.addEventListener:popstate';\n\n  pushState(state: any, title: string, url: string): void {\n    this.skipNextPopState = true;\n    super.pushState(state, title, url);\n  }\n\n  replaceState(state: any, title: string, url: string): void {\n    this.skipNextPopState = true;\n    super.replaceState(state, title, url);\n  }\n\n  onPopState(fn: LocationChangeListener): VoidFunction {\n    // `Zone.current` will reference the zone that serves as an execution context\n    // to some specific application, especially when `onPopState` is called.\n    const zone = Zone.current;\n\n    // Wrap any event listener into zone that is specific to some application.\n    // The main issue is `back/forward` buttons of browsers, because they invoke\n    // `history.back|forward` which dispatch `popstate` event. Since `single-spa`\n    // overrides `history.replaceState` Angular's zone cannot intercept this event.\n    // Only the root zone is able to intercept all events.\n    // See https://github.com/single-spa/single-spa-angular/issues/94 for more details\n    fn = zone.wrap(fn, this.source);\n\n    const onPopStateListener = (event: LocationChangeEvent) => {\n      // The `LocationChangeEvent` doesn't have the `singleSpa` property, since it's added\n      // by `single-spa` starting from `5.4` version. We need this check because we want\n      // to skip \"unnatural\" PopStateEvents, the one caused by `single-spa`.\n      const popStateEventWasDispatchedBySingleSpa = !!(event as unknown as { singleSpa: boolean })\n        .singleSpa;\n\n      if (this.skipNextPopState && popStateEventWasDispatchedBySingleSpa) {\n        this.skipNextPopState = false;\n      } else {\n        fn(event);\n      }\n    };\n\n    return super.onPopState(onPopStateListener);\n  }\n}\n\n/**\n * The `PlatformLocation` class is an \"injectee\" of the `PathLocationStrategy`,\n * which creates `Subject` internally for listening on `popstate` events. We want\n * to provide this class in the most top injector that's used during bootstrapping.\n */\nexport function getSingleSpaExtraProviders(): StaticProvider[] {\n  return [\n    {\n      provide: SingleSpaPlatformLocation,\n      deps: [[new Inject(DOCUMENT)]],\n    },\n    {\n      provide: PlatformLocation,\n      useExisting: SingleSpaPlatformLocation,\n    },\n  ];\n}\n","import { ApplicationRef, NgModuleRef, NgZone } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { LifeCycles } from 'single-spa';\nimport { getContainerElementAndSetTemplate } from 'single-spa-angular/internals';\n\nimport { SingleSpaPlatformLocation } from './extra-providers';\nimport { SingleSpaAngularOptions, BootstrappedSingleSpaAngularOptions } from './types';\n\nconst defaultOptions = {\n  // Required options that will be set by the library consumer.\n  NgZone: null!,\n  bootstrapFunction: null!,\n  template: null!,\n  // Optional options\n  Router: undefined,\n  domElementGetter: undefined, // only optional if you provide a domElementGetter as a custom prop\n  updateFunction: () => Promise.resolve(),\n  bootstrappedNgModuleRefOrAppRef: null,\n};\n\n// This will be provided through Terser global definitions by Angular CLI. This will\n// help to tree-shake away the code unneeded for production bundles.\ndeclare const ngDevMode: boolean;\n\nconst NG_DEV_MODE = typeof ngDevMode === 'undefined' || ngDevMode;\n\nexport function singleSpaAngular<T>(userOptions: SingleSpaAngularOptions<T>): LifeCycles<T> {\n  if (NG_DEV_MODE && typeof userOptions !== 'object') {\n    throw Error('single-spa-angular requires a configuration object');\n  }\n\n  const options: SingleSpaAngularOptions = {\n    ...defaultOptions,\n    ...userOptions,\n  };\n\n  if (NG_DEV_MODE && typeof options.bootstrapFunction !== 'function') {\n    throw Error('single-spa-angular must be passed an options.bootstrapFunction');\n  }\n\n  if (NG_DEV_MODE && typeof options.template !== 'string') {\n    throw Error('single-spa-angular must be passed options.template string');\n  }\n\n  if (NG_DEV_MODE && !options.NgZone) {\n    throw Error(`single-spa-angular must be passed the NgZone option`);\n  }\n\n  if (NG_DEV_MODE && options.Router && !options.NavigationStart) {\n    // We call `console.warn` except of throwing `new Error()` since this will not\n    // be a breaking change.\n    console.warn(`single-spa-angular must be passed the NavigationStart option`);\n  }\n\n  return {\n    bootstrap: bootstrap.bind(null, options as BootstrappedSingleSpaAngularOptions),\n    mount: mount.bind(null, options),\n    unmount: unmount.bind(null, options as BootstrappedSingleSpaAngularOptions),\n    update: options.updateFunction,\n  };\n}\n\nasync function bootstrap(options: BootstrappedSingleSpaAngularOptions, props: any): Promise<void> {\n  // Angular provides an opportunity to develop `zone-less` application, where developers\n  // have to trigger change detection manually.\n  // See https://angular.io/guide/zone#noopzone\n  if (options.NgZone === 'noop') {\n    return;\n  }\n\n  // In order for multiple Angular apps to work concurrently on a page, they each need a unique identifier.\n  options.zoneIdentifier = `single-spa-angular:${props.name || props.appName}`;\n\n  // This is a hack, since NgZone doesn't allow you to configure the property that identifies your zone.\n  // See https://github.com/PlaceMe-SAS/single-spa-angular-cli/issues/33,\n  // https://github.com/single-spa/single-spa-angular/issues/47,\n  // https://github.com/angular/angular/blob/a14dc2d7a4821a19f20a9547053a5734798f541e/packages/core/src/zone/ng_zone.ts#L144,\n  // and https://github.com/angular/angular/blob/a14dc2d7a4821a19f20a9547053a5734798f541e/packages/core/src/zone/ng_zone.ts#L257\n  options.NgZone.isInAngularZone = () => {\n    // @ts-ignore\n    return window.Zone.current._properties[options.zoneIdentifier] === true;\n  };\n\n  options.routingEventListener = () => {\n    options.bootstrappedNgZone!.run(() => {\n      // See https://github.com/single-spa/single-spa-angular/issues/86\n      // Zone is unaware of the single-spa navigation change and so Angular change detection doesn't work\n      // unless we tell Zone that something happened\n    });\n  };\n}\n\nasync function mount(\n  options: SingleSpaAngularOptions,\n  props: any,\n): Promise<NgModuleRef<any> | ApplicationRef> {\n  getContainerElementAndSetTemplate(options, props);\n\n  const bootstrapPromise = options.bootstrapFunction(props);\n\n  if (NG_DEV_MODE && !(bootstrapPromise instanceof Promise)) {\n    throw Error(\n      `single-spa-angular: the options.bootstrapFunction must return a promise, but instead returned a '${typeof bootstrapPromise}' that is not a Promise`,\n    );\n  }\n\n  const ngModuleRefOrAppRef: NgModuleRef<any> | ApplicationRef = await bootstrapPromise;\n\n  if (NG_DEV_MODE) {\n    if (!ngModuleRefOrAppRef || typeof ngModuleRefOrAppRef.destroy !== 'function') {\n      throw Error(\n        `single-spa-angular: the options.bootstrapFunction returned a promise that did not resolve with a valid Angular module or ApplicationRef. Did you call platformBrowserDynamic().bootstrapModule() correctly?`,\n      );\n    }\n  }\n\n  const singleSpaPlatformLocation: SingleSpaPlatformLocation | null =\n    ngModuleRefOrAppRef.injector.get(SingleSpaPlatformLocation, null);\n\n  const ngZoneEnabled = options.NgZone !== 'noop';\n\n  // The user has to provide `BrowserPlatformLocation` only if his application uses routing.\n  // So if he provided `Router` but didn't provide `BrowserPlatformLocation` then we have to inform him.\n  // Also `getSingleSpaExtraProviders()` function should be called only if the user doesn't use\n  // `zone-less` change detection, if `NgZone` is `noop` then we can skip it.\n  if (NG_DEV_MODE && ngZoneEnabled && options.Router && singleSpaPlatformLocation === null) {\n    throw new Error(`\n      single-spa-angular: could not retrieve extra providers from the platform injector. Did you call platformBrowserDynamic(getSingleSpaExtraProviders()).bootstrapModule()?\n    `);\n  }\n\n  const bootstrappedOptions = options as BootstrappedSingleSpaAngularOptions;\n\n  if (ngZoneEnabled) {\n    const ngZone: NgZone = ngModuleRefOrAppRef.injector.get(options.NgZone);\n    const zoneIdentifier: string = bootstrappedOptions.zoneIdentifier!;\n\n    // `NgZone` can be enabled but routing may not be used thus `getSingleSpaExtraProviders()`\n    // function was not called.\n    if (singleSpaPlatformLocation !== null) {\n      skipLocationChangeOnNonImperativeRoutingTriggers(ngModuleRefOrAppRef, options);\n    }\n\n    bootstrappedOptions.bootstrappedNgZone = ngZone;\n    bootstrappedOptions.bootstrappedNgZone['_inner']._properties[zoneIdentifier] = true;\n    window.addEventListener('single-spa:routing-event', bootstrappedOptions.routingEventListener!);\n  }\n\n  bootstrappedOptions.bootstrappedNgModuleRefOrAppRef = ngModuleRefOrAppRef;\n  return ngModuleRefOrAppRef;\n}\n\nfunction unmount(options: BootstrappedSingleSpaAngularOptions): Promise<void> {\n  return Promise.resolve().then(() => {\n    if (options.routingEventListener) {\n      window.removeEventListener('single-spa:routing-event', options.routingEventListener);\n    }\n\n    options.bootstrappedNgModuleRefOrAppRef!.destroy();\n    options.bootstrappedNgModuleRefOrAppRef = null;\n  });\n}\n\nfunction skipLocationChangeOnNonImperativeRoutingTriggers(\n  ngModuleRefOrAppRef: NgModuleRef<any> | ApplicationRef,\n  options: SingleSpaAngularOptions,\n): void {\n  if (!options.NavigationStart) {\n    // As discussed we don't do anything right now if the developer doesn't provide\n    // `options.NavigationStart` since this might be a breaking change.\n    return;\n  }\n\n  const router = ngModuleRefOrAppRef.injector.get(options.Router);\n  const subscription: Subscription = router.events.subscribe((event: any) => {\n    if (event instanceof options.NavigationStart!) {\n      const currentNavigation = router.getCurrentNavigation();\n      // This listener will be set up for each Angular application\n      // that has routing capabilities.\n      // We set `skipLocationChange` for each non-imperative navigation,\n      // Angular router checks under the hood if it has to change\n      // the browser URL or not.\n      // If `skipLocationChange` is truthy then Angular router will not call\n      // `setBrowserUrl()` which calls `history.replaceState()` and dispatches `popstate` event.\n      if (currentNavigation.trigger !== 'imperative') {\n        currentNavigation.extras.skipLocationChange = true;\n        currentNavigation.extras.replaceUrl = false;\n      }\n    }\n  });\n\n  // The `ApplicationRef` also has `onDestroy` method, but it's marked as internal.\n  ngModuleRefOrAppRef['onDestroy'](() => {\n    subscription.unsubscribe();\n  });\n}\n","/**\n * The public api for consumers of single-spa-angular\n */\nexport * from './src/public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["core"],"mappings":"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"}