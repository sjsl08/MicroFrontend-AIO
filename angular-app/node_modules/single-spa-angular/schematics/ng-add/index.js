"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const add_dependencies_1 = require("./rules/add-dependencies");
const create_main_entry_1 = require("./rules/create-main-entry");
const update_configuration_1 = require("./rules/update-configuration");
const add_npm_scripts_1 = require("./rules/add-npm-scripts");
const show_warning_if_routing_is_enabled_1 = require("./rules/show-warning-if-routing-is-enabled");
function default_1(options) {
    return (tree) => tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { workspace, project, host } = yield getWorkspace(tree, options.project);
        return (0, schematics_1.chain)([
            (0, add_dependencies_1.addDependencies)(),
            (0, create_main_entry_1.createMainEntry)(project, options),
            (0, update_configuration_1.updateConfiguration)(workspace, project, host, options),
            (0, add_npm_scripts_1.addNPMScripts)(workspace, project, host, options),
            (0, show_warning_if_routing_is_enabled_1.showWarningIfRoutingIsEnabled)(options),
        ]);
    });
}
exports.default = default_1;
function getWorkspace(tree, projectName) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const host = createVirtualHost(tree);
        const { workspace } = yield core_1.workspaces.readWorkspace('/', host);
        // Previously, we used `projectName` or `workspace.extensions.defaultProject`.
        // The defaultProject workspace option has been deprecated.
        // The project to use will be determined from the current working directory.
        if (!projectName) {
            throw new schematics_1.SchematicsException('The project name is not specified.');
        }
        const project = workspace.projects.get(projectName);
        if (!project) {
            throw new schematics_1.SchematicsException(`Invalid project name: ${projectName}`);
        }
        return { workspace, project, host };
    });
}
function createVirtualHost(tree) {
    return {
        readFile(path) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const data = tree.read(path);
                if (!data) {
                    throw new schematics_1.SchematicsException('File not found.');
                }
                return core_1.virtualFs.fileBufferToString(data);
            });
        },
        writeFile(path, data) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                return tree.overwrite(path, data);
            });
        },
        isDirectory(path) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                return !tree.exists(path) && tree.getDir(path).subfiles.length > 0;
            });
        },
        isFile(path) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                return tree.exists(path);
            });
        },
    };
}
//# sourceMappingURL=index.js.map