"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addNPMScripts = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const utils_1 = require("./utils");
function addNPMScripts(workspace, project, host, options) {
    return (tree) => {
        const pkgPath = '/package.json';
        const buffer = tree.read(pkgPath);
        if (buffer === null) {
            throw new schematics_1.SchematicsException('Could not find package.json');
        }
        updateDeployUrl(workspace, project, host, options.port);
        addScripts(tree, pkgPath, JSON.parse(buffer.toString()), options);
    };
}
exports.addNPMScripts = addNPMScripts;
/**
 * The user can have multiple applications inside the same workspace.
 * E.g. consider following commands:
 *
 * - `yarn ng new --createApplication false workspace`
 * - `yarn ng generate application first-cool-app`
 * - `yarn ng generate application second-cool-app`
 * - `yarn ng add single-spa-angular --project first-cool-app`
 * - `yarn ng add single-spa-angular --project second-cool-app`
 *
 * In that case our schematics should respect passed `--project` argument.
 * Basically it will create different scripts for different applications, thus the
 * user will be able to run them in parallel. Created scripts will be:
 *
 * - build:single-spa:first-cool-app
 * - serve:single-spa:first-cool-app
 *
 * - build:single-spa:second-cool-app
 * - serve:single-spa:second-cool-app
 */
function addScripts(tree, pkgPath, pkg, options) {
    addScriptsForTheSpecificProject(pkg, options.project, options.port);
    tree.overwrite(pkgPath, JSON.stringify(pkg, null, 2));
}
function addScriptsForTheSpecificProject(pkg, project, port) {
    pkg.scripts[`build:single-spa:${project}`] = `ng build ${project} --configuration production`;
    pkg.scripts[`serve:single-spa:${project}`] = `ng s --project ${project} --disable-host-check --port ${port} --live-reload false`;
}
/**
 * @description `--deploy-url` option is deprecated, see: https://angular.io/cli/serve#options
 * This step updates the `deployUrl` which might be defined in `[project].architect.build.options.deployUrl`.
 */
function updateDeployUrl(workspace, project, host, port) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const buildTarget = (0, utils_1.getBuildTarget)(project);
        buildTarget.options.deployUrl = `http://localhost:${port}/`;
        yield core_1.workspaces.writeWorkspace(workspace, host);
    });
}
//# sourceMappingURL=add-npm-scripts.js.map