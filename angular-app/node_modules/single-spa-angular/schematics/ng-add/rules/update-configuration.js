"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateConfiguration = void 0;
const tslib_1 = require("tslib");
// The JSON5 format supports comments and all Angular projects,
// starting from version 10, contain comments in `tsconfig` files.
const json5_1 = require("json5");
const core_1 = require("@angular-devkit/core");
const utils_1 = require("./utils");
function updateConfiguration(workspace, project, host, options) {
    return (tree, context) => tslib_1.__awaiter(this, void 0, void 0, function* () {
        const buildTarget = (0, utils_1.getBuildTarget)(project);
        updateAngularConfiguration(context, project, buildTarget, options);
        updateTSConfig(tree, buildTarget);
        yield core_1.workspaces.writeWorkspace(workspace, host);
        context.logger.info(`Updated angular.json configuration`);
        context.logger.info(buildTarget.builder);
    });
}
exports.updateConfiguration = updateConfiguration;
function updateAngularConfiguration(context, project, buildTarget, options) {
    context.logger.info('Using @angular-builders/custom-webpack builder.');
    updateBuildTarget(buildTarget, project, options);
    updateConfigurationsAndDisableOutputHashing(buildTarget);
    const serveTarget = project.targets.get('serve');
    if (!serveTarget) {
        return;
    }
    serveTarget.builder = '@angular-builders/custom-webpack:dev-server';
}
/**
 * @description This steps updates configurations which are defined
 * in `[project].architect.build.configurations` and sets `outputHashing` to `none`
 * for each configuration.
 */
function updateConfigurationsAndDisableOutputHashing(buildTarget) {
    // If the user doesn't have any `configurations` then just skip this step.
    if (typeof buildTarget.configurations !== 'object') {
        return;
    }
    for (const configuration of Object.values(buildTarget.configurations)) {
        configuration.outputHashing = 'none';
    }
}
/**
 * @description This step resolves the `tsconfig.app.json` path which is defined
 * in `[project].architect.build.options.tsConfig`, reads the TS config and updates
 * the `files` property to point to `main.single-spa.ts` file.
 *
 * This is how `tsconfig.app.json` looks by default in any Angular project:
 * ```json
 * To learn more about this file see: https://angular.io/config/tsconfig.
 * {
 *   "extends": "./tsconfig.json",
 *   "compilerOptions": { ... },
 *   "files": [
 *     "src/main.ts",
 *     "src/polyfills.ts"
 *   ]
 * }
 * ```
 *
 * This is how it will look like after update:
 * ```json
 * {
 *   "extends": "./tsconfig.json",
 *   "compilerOptions": { ... },
 *   "files": ["src/main.single-spa.ts"]
 * }
 * ```
 */
function updateTSConfig(tree, buildTarget) {
    const tsConfigPath = buildTarget.options.tsConfig;
    const buffer = tree.read(tsConfigPath);
    if (buffer === null) {
        return;
    }
    const tsConfig = (0, json5_1.parse)(buffer.toString());
    if (!Array.isArray(tsConfig.files)) {
        return;
    }
    // The "files" property will only contain path to `main.single-spa.ts` file,
    // because we remove `polyfills` from Webpack `entry` property.
    tsConfig.files = [(0, core_1.normalize)('src/main.single-spa.ts')];
    tree.overwrite(tsConfigPath, JSON.stringify(tsConfig, null, 2));
}
/**
 * @description This step updates options for the build target defined in
 * `[project].architect.build.options`. This is how it will look like after update:
 * ```json
 * "builder": "@angular-builders/custom-webpack:browser",
 * "options": {
 *   "customWebpackConfig": {
 *     "path": "extra-webpack.config.js"
 *   }
 *   "main": "src/main.single-spa.ts"
 * }
 * ```
 */
function updateBuildTarget(buildTarget, project, options) {
    const root = (0, core_1.normalize)(project.root);
    buildTarget.builder = '@angular-builders/custom-webpack:browser';
    buildTarget.options.main = (0, core_1.join)(root, (0, core_1.normalize)('src/main.single-spa.ts'));
    buildTarget.options.customWebpackConfig = {
        path: (0, core_1.join)(root, 'extra-webpack.config.js'),
        libraryName: options.project,
        libraryTarget: 'umd',
    };
}
//# sourceMappingURL=update-configuration.js.map